plugins {
    id 'kotlin-multiplatform'
}

repositories {
    google()
    jcenter()
    maven { url 'https://dl.bintray.com/kotlin/kotlin-dev' }
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    maven { url 'https://dl.bintray.com/msink/kotlin-dev' }
    mavenCentral()
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId 'org.jetbrains.kotlin.mpp_app_android'
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName '1.0'
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }
}

dependencies {
    implementation project(':lib-hello')
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
}

def resourcesDirectory = "$projectDir/src/desktopMain/resources"
def windowsResources = "$buildDir/resources/app.res"

task compileWindowsResources(type: Exec) {
    onlyIf { os.isWindows() }

    def konanUserDir = System.getenv("KONAN_DATA_DIR") ?: "${System.getProperty("user.home")}/.konan"
    def konanLLVMDir = "${konanUserDir}/dependencies/msys2-mingw-w64-x86_64-gcc-7.3.0-clang-llvm-lld-6.0.1/bin"
    def rcFile = file("${resourcesDirectory}/app.rc")

    inputs.file rcFile
    outputs.file file(windowsResources)
    commandLine 'cmd', '/c', 'windres', rcFile, '-O', 'coff', '-o', windowsResources
    environment 'PATH', "c:/msys64/mingw64/bin;${konanLLVMDir};${System.getenv('PATH')}"
}

kotlin {
    final def desktopPreset = os.isWindows() ? presets.mingwX64
            : os.isLinux()   ? presets.linuxX64
            : os.isMacOsX()  ? presets.macosX64
            : /*unknown host*/ null

    android("android")

    targets.fromPreset(desktopPreset, "desktop") {
        binaries {
            executable([DEBUG]) {
                entryPoint 'sample.main'
                if (os.isWindows()) {
                    linkerOpts "$windowsResources -mwindows"
                    tasks.compileKotlinDesktop.dependsOn compileWindowsResources
                }
            }
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
            }
        }
        commonTest {
            dependencies {
        		implementation kotlin('test-common')
        		implementation kotlin('test-annotations-common')
            }
        }
        androidMain {
            dependencies {
                implementation kotlin('stdlib')
            }
        }
        androidTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        desktopMain {
            dependencies {
                implementation project(':lib-hello')
                implementation 'com.github.msink:libui:0.2.0-dev'
            }
        }
        desktopTest {
        }
    }
}
